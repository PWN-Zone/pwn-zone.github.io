[{"id":0,"href":"/docs/stack/buffer-overflow-variable/","title":"Buffer Overflow Variable","section":"Stack","content":" Section summary. # "},{"id":1,"href":"/docs/stack/","title":"Stack","section":"Docs","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad # Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol # Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque # Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":2,"href":"/docs/stack/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":3,"href":"/docs/stack/buffer-overflow--static/","title":"Buffer Overflow Static","section":"Stack","content":" Section summary. # "},{"id":4,"href":"/docs/stack/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":5,"href":"/docs/stack/table-of-contents/","title":"Table of Contents","section":"Stack","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":6,"href":"/docs/stack/hidden/","title":"Hidden","section":"Stack","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":7,"href":"/docs/stack/buffer-overflow--static/bkp16_simplecalc/","title":"Simple Calc","section":"Buffer Overflow Static","content":" Puedes descargar el binario de este desafío aquí.\nSimple Calc (Boston Key Party CTF 2016) # Se nos entrega un binario de 64 bits con las siguientes protecciones.\n$ checksec simplecalc Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Stripped: No Al ejecutarlo, el programa solicita la cantidad de operaciones a realizar. Una vez ingresado el número, permite seleccionar la operación deseada.\n$ ./simplecalc |#------------------------------------#| | Something Calculator | |#------------------------------------#| Expected number of calculations: 50 Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; Ingenieria inversa y analisis del codigo fuente # Si abrimos el binario con IDA, podemos ver lo siguiente en la funcion main.\nint __fastcall main(int argc, const char **argv, const char **envp) { int v3; // edx int v4; // ecx int v5; // r8d int v6; // r9d int v7; // edx int v8; // ecx int v9; // r8d int v10; // r9d int v12; // edx int v13; // ecx int v14; // r8d int v15; // r9d char v16; // [rsp+0h] [rbp-50h] char v17; // [rsp+0h] [rbp-50h] _BYTE v18[40]; // [rsp+10h] [rbp-40h] BYREF int v19; // [rsp+38h] [rbp-18h] BYREF int v20; // [rsp+3Ch] [rbp-14h] BYREF __int64 v21; // [rsp+40h] [rbp-10h] int i; // [rsp+4Ch] [rbp-4h] v20 = 0; setvbuf(stdin, 0LL, 2LL, 0LL); setvbuf(stdout, 0LL, 2LL, 0LL); print_motd(); printf((unsigned int)\u0026#34;Expected number of calculations: \u0026#34;, 0, v3, v4, v5, v6, (char)argv); _isoc99_scanf((unsigned int)\u0026#34;%d\u0026#34;, (unsigned int)\u0026amp;v20, v7, v8, v9, v10, v16); handle_newline(); if ( v20 \u0026lt;= 255 \u0026amp;\u0026amp; v20 \u0026gt; 3 ) { v21 = malloc(4 * v20); for ( i = 0; i \u0026lt; v20; ++i ) { print_menu(); _isoc99_scanf((unsigned int)\u0026#34;%d\u0026#34;, (unsigned int)\u0026amp;v19, v12, v13, v14, v15, v17); handle_newline(); switch ( v19 ) { case 1: adds(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4A88; break; case 2: subs(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4AB8; break; case 3: muls(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4AA8; break; case 4: divs(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4A98; break; case 5: memcpy(v18, v21, 4 * v20); free(v21); return 0; default: puts(\u0026#34;Invalid option.\\n\u0026#34;); break; } } free(v21); return 0; } else { puts(\u0026#34;Invalid number.\u0026#34;); return 0; } } El programa define variables de tipo int y luego muestra en pantalla el mensaje Expected number of calculations:. A continuación, espera la entrada del usuario mediante scanf(). Si el número ingresado no está en el rango de 4 a 255, imprime Invalid number. y finaliza la ejecución retornando 0. En caso contrario, entra en una estructura de control switch, donde ofrece cinco opciones: sumar, restar, multiplicar y dividir números, además de una quinta opción que permite salir del programa. Podemos probar una de estas opciones.\n$ ./simplecalc |#------------------------------------#| | Something Calculator | |#------------------------------------#| Expected number of calculations: 5 Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 5 $ Al elegir la opción 1, podemos sumar números y luego salir del programa sin problemas. Esto nos ayuda a comprender el funcionamiento del binario.\nEstrategia de Explotación # El programa es vulnerable a Buffer Overflow debido a la forma en que maneja los cálculos almacenados en memoria. Cuando se selecciona un número elevado de cálculos y se realizan múltiples operaciones, el programa almacena los resultados en memoria. Al elegir la opción 5, se ejecuta memcpy(), copiando los cálculos almacenados en v21 hacia la variable v18.Al revisar la variable v18 en el codigo fuente vemos que es un array de solo 40 bytes, lo que significa que, si ingresamos más cálculos de los que este buffer puede almacenar, se producirá un desbordamiento de buffer. Vamos a probarlo.\n|$ ./simplecalc |#------------------------------------#| | Something Calculator | |#------------------------------------#| Expected number of calculations: 50 Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 5 [1] 11686 segmentation fault (core dumped) ./simplecalc Como vemos luego de ingresar muchos calculos el programa corrompe.\n"},{"id":8,"href":"/docs/stack/buffer-overflow-variable/bkp16_simplecalc/","title":"Simple Calc","section":"Buffer Overflow Variable","content":" Puedes descargar el binario de este desafío aquí.\nSimple Calc (Boston Key Party CTF 2016) # Se nos entrega un binario de 64 bits con las siguientes protecciones.\n$ checksec simplecalc Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Stripped: No Al ejecutarlo, el programa solicita la cantidad de operaciones a realizar. Una vez ingresado el número, permite seleccionar la operación deseada.\n$ ./simplecalc |#------------------------------------#| | Something Calculator | |#------------------------------------#| Expected number of calculations: 50 Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; Ingenieria inversa y analisis del codigo fuente # Si abrimos el binario con IDA, podemos ver lo siguiente en la funcion main.\nint __fastcall main(int argc, const char **argv, const char **envp) { int v3; // edx int v4; // ecx int v5; // r8d int v6; // r9d int v7; // edx int v8; // ecx int v9; // r8d int v10; // r9d int v12; // edx int v13; // ecx int v14; // r8d int v15; // r9d char v16; // [rsp+0h] [rbp-50h] char v17; // [rsp+0h] [rbp-50h] _BYTE v18[40]; // [rsp+10h] [rbp-40h] BYREF int v19; // [rsp+38h] [rbp-18h] BYREF int v20; // [rsp+3Ch] [rbp-14h] BYREF __int64 v21; // [rsp+40h] [rbp-10h] int i; // [rsp+4Ch] [rbp-4h] v20 = 0; setvbuf(stdin, 0LL, 2LL, 0LL); setvbuf(stdout, 0LL, 2LL, 0LL); print_motd(); printf((unsigned int)\u0026#34;Expected number of calculations: \u0026#34;, 0, v3, v4, v5, v6, (char)argv); _isoc99_scanf((unsigned int)\u0026#34;%d\u0026#34;, (unsigned int)\u0026amp;v20, v7, v8, v9, v10, v16); handle_newline(); if ( v20 \u0026lt;= 255 \u0026amp;\u0026amp; v20 \u0026gt; 3 ) { v21 = malloc(4 * v20); for ( i = 0; i \u0026lt; v20; ++i ) { print_menu(); _isoc99_scanf((unsigned int)\u0026#34;%d\u0026#34;, (unsigned int)\u0026amp;v19, v12, v13, v14, v15, v17); handle_newline(); switch ( v19 ) { case 1: adds(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4A88; break; case 2: subs(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4AB8; break; case 3: muls(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4AA8; break; case 4: divs(); *(_DWORD *)(v21 + 4LL * i) = dword_6C4A98; break; case 5: memcpy(v18, v21, 4 * v20); free(v21); return 0; default: puts(\u0026#34;Invalid option.\\n\u0026#34;); break; } } free(v21); return 0; } else { puts(\u0026#34;Invalid number.\u0026#34;); return 0; } } El programa define variables de tipo int y luego muestra en pantalla el mensaje Expected number of calculations:. A continuación, espera la entrada del usuario mediante scanf(). Si el número ingresado no está en el rango de 4 a 255, imprime Invalid number. y finaliza la ejecución retornando 0. En caso contrario, entra en una estructura de control switch, donde ofrece cinco opciones: sumar, restar, multiplicar y dividir números, además de una quinta opción que permite salir del programa. Podemos probar una de estas opciones.\n$ ./simplecalc |#------------------------------------#| | Something Calculator | |#------------------------------------#| Expected number of calculations: 5 Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 5 $ Al elegir la opción 1, podemos sumar números y luego salir del programa sin problemas. Esto nos ayuda a comprender el funcionamiento del binario.\nEstrategia de Explotación # El programa es vulnerable a Buffer Overflow debido a la forma en que maneja los cálculos almacenados en memoria. Cuando se selecciona un número elevado de cálculos y se realizan múltiples operaciones, el programa almacena los resultados en memoria. Al elegir la opción 5, se ejecuta memcpy(), copiando los cálculos almacenados en v21 hacia la variable v18.Al revisar la variable v18 en el codigo fuente vemos que es un array de solo 40 bytes, lo que significa que, si ingresamos más cálculos de los que este buffer puede almacenar, se producirá un desbordamiento de buffer. Vamos a probarlo.\n|$ ./simplecalc |#------------------------------------#| | Something Calculator | |#------------------------------------#| Expected number of calculations: 50 Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 1 Integer x: 50 Integer y: 50 Result for x + y is 100. Options Menu: [1] Addition. [2] Subtraction. [3] Multiplication. [4] Division. [5] Save and Exit. =\u0026gt; 5 [1] 11686 segmentation fault (core dumped) ./simplecalc Como vemos luego de ingresar muchos calculos el programa corrompe.\n"}]