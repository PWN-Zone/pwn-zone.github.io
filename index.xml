<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on PWN Zone</title><link>http://localhost:1313/</link><description>Recent content in Introduction on PWN Zone</description><generator>Hugo</generator><language>en</language><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml"/><item><title>Recommended background knowledge</title><link>http://localhost:1313/docs/background/recommended-background-knowledge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/background/recommended-background-knowledge/</guid><description>&lt;h2 id="how-computers-work">
 How Computers Work
 &lt;a class="anchor" href="#how-computers-work">#&lt;/a>
&lt;/h2>
&lt;p>Before diving into binary exploitation, it&amp;rsquo;s crucial to understand how computers work at a fundamental level. This includes learning about CPU architecture, memory hierarchy, how instructions are executed, and the role of operating systems. Having a solid grasp of these concepts will make it much easier to understand vulnerabilities and how to exploit them effectively.&lt;/p>
&lt;h3 id="learning-resources">
 Learning Resources.
 &lt;a class="anchor" href="#learning-resources">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://steveklabnik.com/writing/should-you-learn-c-to-learn-how-the-computer-works">How the computer works Steve Klabnik&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=6jSKldt7Eqs">How a CPU works and Introduction to Assembler - bin 0x04&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/computerscience/comments/ljfcm3/how_computers_work_the_basics/?rdt=50034">How Computers Work: The Basics (Reddit Thread)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="c-language">
 C Language
 &lt;a class="anchor" href="#c-language">#&lt;/a>
&lt;/h2>
&lt;p>One of the first things we must master before learning binary exploitation is the C programming language. Most of the binaries we will analyze and exploit are written in C, and more importantly, the Linux kernel itself is written in C. Understanding how memory management, pointers, and low-level operations work in C is essential for recognizing and exploiting vulnerabilities such as buffer overflows, use-after-free, and format string attacks.&lt;/p></description></item><item><title>Tools Required</title><link>http://localhost:1313/docs/background/tools-required/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/background/tools-required/</guid><description>&lt;h1 id="tools-required">
 Tools Required
 &lt;a class="anchor" href="#tools-required">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Gallopsled/pwntools">pwntools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hugsy/gef">gef&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Simple Calc</title><link>http://localhost:1313/docs/stack/buffer-overflow-static/bkp16_simplecalc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/stack/buffer-overflow-static/bkp16_simplecalc/</guid><description>&lt;blockquote>
&lt;p>You can download the binary for this challenge &lt;a href="https://github.com/PWN-Zone/Challenges/blob/main/Stack/Buffer%20Overflow%20Static/simplecalc">here&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;h1 id="simple-calc-boston-key-party-ctf-2016">
 Simple Calc (Boston Key Party CTF 2016)
 &lt;a class="anchor" href="#simple-calc-boston-key-party-ctf-2016">#&lt;/a>
&lt;/h1>
&lt;p>We are given a 64-bit binary with the following protections.&lt;/p>
&lt;pre>&lt;font color="#CC0000">&lt;b>$&lt;/b>&lt;/font> checksec simplecalc
 Arch: amd64-64-little
 RELRO: &lt;font color="#C4A000">Partial RELRO&lt;/font>
 Stack: &lt;font color="#CC0000">No canary found&lt;/font>
 NX: &lt;font color="#4E9A06">NX enabled&lt;/font>
 PIE: &lt;font color="#CC0000">No PIE (0x400000)&lt;/font>
 Stripped: &lt;font color="#CC0000">No&lt;/font>&lt;/pre>
&lt;p>When executed, the program asks for the number of operations to be performed. Once the number is entered, it allows you to select the desired operation.&lt;/p></description></item><item><title>TryOverflowMe 1</title><link>http://localhost:1313/docs/stack/buffer-overflow-variable/tryoverflowme1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/stack/buffer-overflow-variable/tryoverflowme1/</guid><description>&lt;h1 id="tryoverflowme-1">
 TryOverflowMe 1
 &lt;a class="anchor" href="#tryoverflowme-1">#&lt;/a>
&lt;/h1>
&lt;p>We are provided with a 64-bit binary with the following protections.&lt;/p>
&lt;pre>&lt;font color="#F66151">&lt;b>$&lt;/b>&lt;/font> checksec overflowme1 
 Arch: amd64-64-little
 RELRO: &lt;font color="#A2734C">Partial RELRO&lt;/font>
 Stack: &lt;font color="#C01C28">No canary found&lt;/font>
 NX: &lt;font color="#26A269">NX enabled&lt;/font>
 PIE: &lt;font color="#C01C28">No PIE (0x400000)&lt;/font>
 Stripped: &lt;font color="#C01C28">No&lt;/font>&lt;/pre>
&lt;p>We also have its source code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setup&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">banner&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> admin &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PLease go ahead and leave a comment :&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">gets&lt;/span>(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (admin){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> filename &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;flag.txt&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FILE&lt;span style="color:#f92672">*&lt;/span> file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fopen&lt;/span>(filename, &lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> ch;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ((ch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fgetc&lt;/span>(file)) &lt;span style="color:#f92672">!=&lt;/span> EOF) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">putchar&lt;/span>(ch);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fclose&lt;/span>(file);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">puts&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bye bye&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exit&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="analysis-of-the-source-code">
 Analysis of the source code.
 &lt;a class="anchor" href="#analysis-of-the-source-code">#&lt;/a>
&lt;/h2>
&lt;p>We see that it defines a variable &lt;code>admin&lt;/code> with the value of &lt;code>0&lt;/code>, then defines a buffer of &lt;code>0x10&lt;/code> (16 bytes in decimal), with &lt;code>puts&lt;/code> prints the string &lt;code>PLease go ahead and leave a comment :&lt;/code> and takes our input with the function &lt;code>gets()&lt;/code>, this makes the binary vulnerable to Buffer Overflow because this function does not control the size of our input allowing us to overflow the buffer. Finally with a conditional if it checks if the variable admin is equal to &lt;code>1&lt;/code>, if this is true it opens the flag (&lt;code>flag.txt&lt;/code>) and displays it on the screen, if the condition is not met it prints &lt;code>Bye bye&lt;/code> and exits the program with a status code &lt;code>1&lt;/code>.&lt;/p></description></item></channel></rss>